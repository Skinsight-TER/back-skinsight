// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  COMMING
  DONE
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  firstName     String
  lastName      String
  gender        Gender
  age           Int
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  patient       Patient?
  generaliste   Generaliste?
  dermatologist Dermatologist?
  Message       Message[]
}

model Patient {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  preconsultation Preconsultation[]
  Appointment     Appointment[]
  Image           Image[]
}

model Generaliste {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  userId          String            @unique
  preconsultation Preconsultation[]
  Conversation    Conversation[]
}

model Dermatologist {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  Appointment    Appointment[]
  Recommendation Recommendation[]
  Conversation   Conversation[]
}

model Preconsultation {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        Status
  description   String
  patient       Patient?     @relation(fields: [patientId], references: [id])
  patientId     String?
  generaliste   Generaliste? @relation(fields: [generalisteId], references: [id])
  generalisteId String?
  infoPatient   Json
  Image         Image[]
}

model Subject {
  id      String      @id @default(uuid())
  name    String
  message MessageIA[]
}

model MessageIA {
  id        String  @id @default(uuid())
  subject   Subject @relation(fields: [subjectId], references: [id])
  content   String
  subjectId String
  submiteur String
  iaModel   String?
}

model Appointment {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  date            DateTime
  patient         Patient?         @relation(fields: [patientId], references: [id])
  patientId       String?
  dermatolog      Dermatologist?   @relation(fields: [dermatologistId], references: [id])
  dermatologistId String?
  status          Status
  infoPatient     Json
  recommandation  Recommendation[]
}

model Recommendation {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId   String
  content         String
  dermatologist   Dermatologist @relation(fields: [dermatologistId], references: [id])
  dermatologistId String
}

model Conversation {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  generaliste     Generaliste   @relation(fields: [generalisteId], references: [id])
  generalisteId   String
  dermatologist   Dermatologist @relation(fields: [dermatologistId], references: [id])
  dermatologistId String
  message         Message[]
}

model Message {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  content        String
  date           DateTime
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Image {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  url               String
  patient           Patient          @relation(fields: [patientId], references: [id])
  patientId         String
  preconsultation   Preconsultation? @relation(fields: [preconsultationId], references: [id])
  preconsultationId String?
}
